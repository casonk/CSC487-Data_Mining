reticulate::repl_python()
from sklearn import svm
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
quit
options(knitr.graphics.error = FALSE)
library(knitr)
library(ggplot2)
reticulate::repl_python()
from sklearn import svm
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# load in the data...
data = {
'department' : ['sales', 'sales', 'sales', 'systems',
'systems', 'systems', 'systems', 'marketing',
'marketing', 'secretary', 'secretary'],
'age' : ['31_35', '26_30', '31_35', '21_25',
'31_35', '26_30', '41_45', '36_40',
'31_35', '46_50', '26_30'],
'salary' : ['46K_50K', '26K_30K', '31K_35K', '46K_50K',
'66K_70K', '46K_50K', '66K_70K', '46K_50K',
'41K_45K', '36K_40K', '26K_30K'],
'status' : ['senior', 'junior', 'junior', 'junior',
'senior', 'junior', 'senior', 'senior',
'junior', 'senior', 'junior'],
'count' : [30, 40, 40, 20, 5, 3, 3, 10, 4, 4, 6]
}
df1 = pd.DataFrame(data)
# preview the data...
df1
# mask for the given conditions and preview the satisfactory data.
dpt_mask = df1["department"] == "systems"
age_mask = df1["age"] == "26_30"
sal_mask = df1["salary"] == "46K_50K"
df1[dpt_mask & age_mask & sal_mask]
# read in the data...
df2 = pd.read_csv(
"C:\\Users\\cason\\OneDrive - Umich\\Computer_Science\\Classes\\Winter_2022\\Data_Mining\\Data\\Diabetes\\diabetes_train.csv"
)
# read in the data...
# df2 = pd.read_csv(my_data_path.csv)
# preview the data...
df2
# split the data into training set...
diabetes_train = df2.iloc[:-10]
diabetes_train
# split the data into testing set...
diabetes_test = df2.iloc[-10:]
diabetes_test
# split data sets into attributes & labels
diabetes_train_X = diabetes_train.iloc[:,:-1]
diabetes_train_y = diabetes_train.iloc[:,-1]
diabetes_test_X = diabetes_test.iloc[:,:-1]
diabetes_test_y = diabetes_test.iloc[:,-1]
# train the model on the training set...
svm_clf = svm.SVC(C=1000, gamma=0.00001, kernel='rbf')
svm_clf.fit(diabetes_train_X, diabetes_train_y)
# use the model to predict on the test set & evaluate...
svm_clf_predictions = svm_clf.predict(diabetes_test_X)
confusion_matrix(diabetes_test_y, svm_clf_predictions)
ax = plt.gca()
ax.plot([0.0,1.0],[0.0,1.0],c='black',linestyle='dashed',zorder=1)
ax.scatter([0.0,0.2,0.2,0.2,0.4,0.4,0.6,0.8,1.0,1.0],
[0.2,0.2,0.4,0.6,0.6,0.8,0.8,0.8,0.8,1.0],
c='blue',zorder=2)
ax.plot([0.0,0.0,0.2,0.4,1.0],[0.0,0.2,0.6,0.8,1.0],c='red',zorder=3)
plt.title('ROC Curve')
plt.xlabel('FPR')
plt.ylabel('TPR')
quit
reticulate::repl_python()
xs = np.array([2,2,8,5,7,6,1,4)
ys = np.array([10,5,4,8,5,4,2,9])
cx = 8
cy = 4
cx_diff = np.abs(cx -xs)
cy_diff = np.abs(cy -ys)
hx = 4
xy = 9
quit
reticulate::repl_python()
xs = np.array([2,2,8,5,7,6,1,4])
ys = np.array([10,5,4,8,5,4,2,9])
cx = 8
cy = 4
cx_diff = np.abs(cx -xs)
cy_diff = np.abs(cy -ys)
hx = 4
xy = 9
quit
reticulate::repl_python()
xs = np.array([2,2,8,5,7,6,1,4])
ys = np.array([10,5,4,8,5,4,2,9])
cx = 8
cy = 4
cx_diff = np.abs(cx -xs)
cy_diff = np.abs(cy -ys)
hx = 4
xy = 9
cx_diff
quit
reticulate::repl_python()
xs = np.array([2,2,8,5,7,6,1,4])
ys = np.array([10,5,4,8,5,4,2,9])
cx = 8
cy = 4
cx_diff = np.abs(cx -xs)
cy_diff = np.abs(cy -ys)
cx_diff + cy_diff
hx = 4
xy = 9
quit
reticulate::repl_python()
xs = np.array([2,2,8,5,7,6,1,4])
ys = np.array([10,5,4,8,5,4,2,9])
cx = 8
cy = 4
cx_diff = np.abs(cx -xs)
cy_diff = np.abs(cy -ys)
c_dist = cx_diff + cy_diff
hx = 4
hy = 9
hx_diff = np.abs(hx -xs)
hy_diff = np.abs(hy -ys)
h_dist = hx_diff + hy_diff
c_dist, h_dist
quit
reticulate::repl_python()
z1xs = np.array([8,7,6,1])
z1ys = np.array([4,5,4,2])
z1x = np.mean(z1xs)
z1y = np.mean(z1ys)
z1x, z1y
z2xs = np.array([2,2,5,4])
z2ys = np.array([10,5,8,9])
z2x = np.mean(z2xs)
z2y = np.mean(z2ys)
z2x, z2y
exit()
exit
exit
exit()
R
cls
python
cls
exit
exit()
data.frame([c(0,5,8,4,7,8,8,2)])
data.frame(c(0,5,8,4,7,8,8,2))
data.frame(c(a,b,c,d,e,f,g,h))
data.frame(c('a','b','c','d','e','f','g','h'))
data.frame(c('a','b','c','d','e','f','g','h'))-> data
data()
data
data$1
data$c..a....b....c....d....e....f....g....h..
data$1
data$a
data$b
data$a = c(0,5,8,4,7,8,8,2)
data
data.frame(-> data
data.frame()-> data
data$a = c(0,5,8,4,7,8,8,2)
data.frame(c(0,1,2,3,4,5,6,7,8))-> data
data$a = c(0,5,8,4,7,8,8,2)
data
cls
clear
distc = read.delim('C:\\Users\\cason\\OneDrive - Umich\\Computer_Science\\Classes\\Winter_2022\\Data_Mining\\Data\\hw4_distances.csv', header = T, row.names=1, sep=',')
distc
distc = as.dist(distc)
distc
hc = hclust(distc, method = 'single')
plot(hc)
plot(hc, hang = -1)
plot(hc)
